"""
Django settings for calorie_tracker project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="django-insecure-006vdf%35^m0_sd%+jom_%4%=yd%5=dy&(3d83!((l30#*gs0^")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Parse ALLOWED_HOSTS from environment variable
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda x: [h.strip() for h in x.split(',') if h.strip()])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "accounts",
    "foods",
    "meals",
    "images",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom logging middleware
    "calorie_tracker.middleware.RequestLoggingMiddleware",
    "calorie_tracker.middleware.PerformanceLoggingMiddleware",
    "calorie_tracker.middleware.SecurityLoggingMiddleware",
]

ROOT_URLCONF = "calorie_tracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "calorie_tracker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# CORS Settings - Use environment variable for flexibility
# Parse CORS_ALLOWED_ORIGINS from environment variable or use defaults
default_cors_origins = "http://localhost:3000,http://127.0.0.1:3000"
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS', 
    default=default_cors_origins,
    cast=lambda x: [origin.strip().strip('"').strip("'") for origin in x.replace('[', '').replace(']', '').split(',') if origin.strip()]
)

# Also support FRONTEND_URL for single domain configuration
frontend_url = config('FRONTEND_URL', default=None)
if frontend_url and frontend_url not in CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS.append(frontend_url)

CORS_ALLOW_CREDENTIALS = True

# Allow standard headers
CORS_ALLOW_HEADERS = [
    "authorization",
    "content-type",
]

# Media files for image uploads

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Custom user model
AUTH_USER_MODEL = "accounts.User"

from dotenv import load_dotenv

load_dotenv()
import json


USDA_API_KEYS = json.loads(os.getenv("USDA_API_KEYS", "[]"))
OPENAI_API_KEYS = json.loads(os.getenv("OPENAI_API_KEYS", "[]"))

# Ensure logs directory exists
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

# Logging Configuration
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': '[{levelname}] {asctime} {name} {process:d} {thread:d} - {message}',
			'style': '{',
		},
		'simple': {
			'format': '[{levelname}] {asctime} - {message}',
			'style': '{',
		},
		'detailed': {
			'format': '[{levelname}] {asctime} {name} {funcName}:{lineno} - {message}',
			'style': '{',
		},
	},
	'filters': {
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse',
		},
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'handlers': {
		'console': {
			'level': 'INFO',
			'filters': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'simple'
		},
		'console_debug': {
			'level': 'DEBUG',
			'filters': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'detailed'
		},
		'file_general': {
			'level': 'INFO',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
			'maxBytes': 1024*1024*10,  # 10 MB
			'backupCount': 5,
			'formatter': 'verbose',
		},
		'file_debug': {
			'level': 'DEBUG',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'debug.log'),
			'maxBytes': 1024*1024*10,  # 10 MB
			'backupCount': 3,
			'formatter': 'detailed',
		},
		'file_error': {
			'level': 'ERROR',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'error.log'),
			'maxBytes': 1024*1024*10,  # 10 MB
			'backupCount': 5,
			'formatter': 'verbose',
		},
		'file_api': {
			'level': 'INFO',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'api.log'),
			'maxBytes': 1024*1024*10,  # 10 MB
			'backupCount': 5,
			'formatter': 'verbose',
		},
		'file_openai': {
			'level': 'INFO',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'openai.log'),
			'maxBytes': 1024*1024*10,  # 10 MB
			'backupCount': 3,
			'formatter': 'detailed',
		},
		'file_usda': {
			'level': 'INFO',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'usda.log'),
			'maxBytes': 1024*1024*5,  # 5 MB
			'backupCount': 3,
			'formatter': 'detailed',
		},
	},
	'loggers': {
		'django': {
			'handlers': ['console', 'file_general'],
			'level': 'INFO',
			'propagate': False,
		},
		'django.request': {
			'handlers': ['console', 'file_api', 'file_error'],
			'level': 'WARNING',
			'propagate': False,
		},
		'django.db.backends': {
			# SQL logging: set ENABLE_SQL_DEBUG=true in .env to see all SQL queries
			'handlers': ['file_debug'] + (['console_debug'] if config('ENABLE_SQL_DEBUG', default=False, cast=bool) else []),
			'level': 'DEBUG' if config('ENABLE_SQL_DEBUG', default=False, cast=bool) else 'WARNING',
			'propagate': False,
		},
		# App-specific loggers
		'accounts': {
			'handlers': ['console', 'file_api'],
			'level': 'INFO',  # Reduced from DEBUG to INFO
			'propagate': False,
		},
		'foods': {
			'handlers': ['console', 'file_api'],
			'level': 'INFO',  # Reduced from DEBUG to INFO
			'propagate': False,
		},
		'meals': {
			'handlers': ['console', 'file_api'],
			'level': 'INFO',  # Reduced from DEBUG to INFO
			'propagate': False,
		},
		'images': {
			'handlers': ['console', 'file_api'],
			'level': 'INFO',  # Reduced from DEBUG to INFO
			'propagate': False,
		},
		# External service loggers  
		'calorie_tracker.openai_service': {
			'handlers': ['console', 'file_openai'],
			'level': 'INFO',  # Reduced from DEBUG, keep important API calls
			'propagate': False,
		},
		'foods.usda_service': {
			'handlers': ['console', 'file_usda'],
			'level': 'INFO',  # Reduced from DEBUG
			'propagate': False,
		},
		# API request logging
		'api_requests': {
			'handlers': ['console', 'file_api'],
			'level': 'INFO',
			'propagate': False,
		},
		# Root logger for everything else
		'': {
			'handlers': ['console', 'file_general', 'file_error'],
			'level': 'INFO',
		},
	},
}
