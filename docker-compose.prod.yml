version: '3.8'

services:
	backend:
		build: .
		restart: unless-stopped
		ports:
			- "${PORT:-8000}:${PORT:-8000}"
		volumes:
			- ./logs:/app/logs
			- ./media:/app/media
			- static_volume:/app/static
		environment:
			- DEBUG=False
			- PORT=${PORT:-8000}
		env_file:
			- .env.production
		depends_on:
			- db
			- redis
		deploy:
			replicas: 2
			resources:
				limits:
					memory: 1G
					cpus: '0.5'
				reservations:
					memory: 512M
					cpus: '0.25'
		healthcheck:
			test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8000}/api/v1/health/"]
			interval: 30s
			timeout: 10s
			retries: 3
			start_period: 40s

	db:
		image: postgres:15-alpine
		restart: unless-stopped
		volumes:
			- postgres_data:/var/lib/postgresql/data
		environment:
			- POSTGRES_DB=calorie_tracker
			- POSTGRES_USER=postgres
			- POSTGRES_PASSWORD=postgres123
		# 生产环境不暴露端口 / Don't expose port in production
		# ports:
		#   - "5432:5432"

	redis:
		image: redis:7-alpine
		restart: unless-stopped
		volumes:
			- redis_data:/data
		command: redis-server --appendonly yes

	# Nginx 反向代理 / Nginx Reverse Proxy (only needed if not using Railway)
	# nginx:
	# 	image: nginx:alpine
	# 	restart: unless-stopped
	# 	ports:
	# 		- "80:80"
	# 		- "443:443"
	# 	volumes:
	# 		- ./nginx.conf:/etc/nginx/nginx.conf
	# 		- static_volume:/app/static
	# 		- ./ssl:/etc/nginx/ssl
	# 	depends_on:
	# 		- backend

volumes:
	postgres_data:
	redis_data:
	static_volume: